# Downloading Source Code

# /etc/apt/sources.list:
# Is a configuration file
# that your package manager uses to determine which repositories
# and which package files it downloads.
# In other words, which sources it downloads:

sudo nano /etc/apt/sources.list <--- Worked in "artful" release

# In that OS release, you would uncomment the "deb-src" to activate the ability to download source code.
# The you would run ---> sudo apt-get update to install all the source packages into our cache.

# Note, in Ubuntu "24.04.2 LTS (Noble Numbat)"

# Ubuntu sources have moved to /etc/apt/sources.list.d/ubuntu.sources
# The "deb-src" text does not exist in this OS release.

sudo nano /etc/apt/sources.list.d/ubuntu.sources

# Add deb-src to each entry, here is the file after edits:

Types: deb deb-src
URIs: http://ports.ubuntu.com/ubuntu-ports/
Suites: noble noble-updates noble-backports
Components: main restricted universe multiverse
Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg

Types: deb deb-src
URIs: http://ports.ubuntu.com/ubuntu-ports/
Suites: noble-security
Components: main restricted universe multiverse
Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg

# Before we can download source code,
# we need to install one more package:

sudo apt-get install dpkg-dev

# Installing pre-compiled binary versions of software packages, uses the following syntax:
# sudo apt-get install <software-package-name>
# sudo apt-get install x11-apps

# To download the source code, use the following syntax:
# sudo apt-get source <software-package-name>

sudo apt-get source x11-apps

# Now you can see the source code tarball:

tron@ubuntu-dev:~/Desktop$ sudo apt-get source x11-apps
Reading package lists... Done
NOTICE: 'x11-apps' packaging is maintained in the 'Git' version control system at:
https://salsa.debian.org/xorg-team/app/x11-apps.git
Please use:
git clone https://salsa.debian.org/xorg-team/app/x11-apps.git
to retrieve the latest (possibly unreleased) updates to the package.
Skipping already downloaded file 'x11-apps_7.7+11build3.dsc'
Need to get 4,878 kB of source archives.
Get:1 http://ports.ubuntu.com/ubuntu-ports noble/main x11-apps 7.7+11build3 (tar) [4,878 kB]
Fetched 4,878 kB in 2s (2,909 kB/s)   
Skipping unpack of already unpacked source in x11-apps-7.7+11build3
W: Download is performed unsandboxed as root as file 'x11-apps_7.7+11build3.tar.gz' couldn't be accessed by user '_apt'. - pkgAcquire::Run (13: Permission denied)

# Now we have the source code files:

tron@ubuntu-dev:~/Desktop$ ls -lh | grep x11
drwxr-xr-x 26 root root 4.0K Nov 14  2023 x11-apps-7.7+11build3
-rw-r--r--  1 root root 2.0K Mar 31  2024 x11-apps_7.7+11build3.dsc
-rw-r--r--  1 root root 4.7M Mar 31  2024 x11-apps_7.7+11build3.tar.gz

# Navigate to the "x11-apps-7.7+11build3" directory.
# From there you can view or edit the <package-name.c> source code:

tron@ubuntu-dev:~/Desktop/x11-apps-7.7+11build3/xeyes$ cat xeyes.c 

/*

Copyright (c) 1991  X Consortium

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of the X Consortium shall
not be used in advertising or otherwise to promote the sale, use or
other dealings in this Software without prior written authorization
from the X Consortium.

*/

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

#include <X11/Intrinsic.h>
#include <X11/StringDefs.h>
#include <X11/Shell.h>
#include "Eyes.h"
#include <stdio.h>
#include <stdlib.h>
#include "eyes.bit"
#include "eyesmask.bit"

/* Exit with message describing command line format */

static void _X_NORETURN
usage(int exitval)
{
    fprintf(stderr,
	    "usage: xeyes [-display [{host}]:{vs}]\n"
	    "             [-geometry [{width}][x{height}][{+-}{xoff}[{+-}{yoff}]]]\n"
	    "             [-fg {color}] [-bg {color}] [-bd {color}] [-bw {pixels}]\n"
	    "             [-shape | +shape] [-outline {color}] [-center {color}]\n"
	    "             [-backing {backing-store}] [-distance]\n"
	    "             [-biblicallyAccurate]\n"
#ifdef XRENDER
	    "             [-render | +render]\n"
#endif
#ifdef PRESENT
	    "             [-present | +present]\n"
#endif
            "       xeyes -help\n"
            "       xeyes -version\n");
    exit(exitval);
}

/* Command line options table.  Only resources are entered here...there is a
   pass over the remaining options after XtParseCommand is let loose. */

static XrmOptionDescRec options[] = {
{(char *)"-outline",	(char *)"*eyes.outline",	XrmoptionSepArg,	NULL},
{(char *)"-center",	(char *)"*eyes.center",		XrmoptionSepArg,	NULL},
{(char *)"-backing",	(char *)"*eyes.backingStore",	XrmoptionSepArg,	NULL},
{(char *)"-shape",	(char *)"*eyes.shapeWindow",	XrmoptionNoArg,		(char *)"TRUE"},
{(char *)"+shape",	(char *)"*eyes.shapeWindow",	XrmoptionNoArg,		(char *)"FALSE"},
#ifdef XRENDER
{(char *)"-render",	(char *)"*eyes.render",		XrmoptionNoArg,		(char *)"TRUE"},
{(char *)"+render",	(char *)"*eyes.render",		XrmoptionNoArg,		(char *)"FALSE"},
#endif
#ifdef PRESENT
{(char *)"-present",	(char *)"*eyes.present",	XrmoptionNoArg,		(char *)"TRUE"},
{(char *)"+present",	(char *)"*eyes.present",	XrmoptionNoArg,		(char *)"FALSE"},
#endif
{(char *)"-distance",	(char *)"*eyes.distance",	XrmoptionNoArg,		(char *)"TRUE"},
{(char *)"-biblicallyAccurate",	(char *)"*eyes.biblicallyAccurate",	XrmoptionNoArg,		(char *)"TRUE"},
};

static Atom wm_delete_window;

/*ARGSUSED*/
static void
quit(Widget w, XEvent *event, String *params, Cardinal *num_params)
{
    if (event->type == ClientMessage &&
	event->xclient.data.l[0] != wm_delete_window) {
	XBell(XtDisplay(w), 0);
    } else {
	XtDestroyApplicationContext(XtWidgetToApplicationContext(w));
	exit(0);
    }
}

static XtActionsRec actions[] = {
    {(char *) "quit",	quit}
};

int
main(int argc, char **argv)
{
    XtAppContext app_context;
    Widget toplevel;
    Arg arg[2];
    Cardinal i;

    XtSetLanguageProc(NULL, (XtLanguageProc) NULL, NULL);

    /* Handle args that don't require opening a display */
    for (int n = 1; n < argc; n++) {
	const char *argn = argv[n];
	/* accept single or double dash for -help & -version */
	if (argn[0] == '-' && argn[1] == '-') {
	    argn++;
	}
	if (strcmp(argn, "-help") == 0) {
	    usage(0);
	}
	if (strcmp(argn, "-version") == 0) {
	    puts(PACKAGE_STRING);
	    exit(0);
	}
    }

    toplevel = XtAppInitialize(&app_context, "XEyes",
			       options, XtNumber(options), &argc, argv,
			       NULL, arg, (Cardinal) 0);

    if (argc != 1) {
	fputs("Unknown argument(s):", stderr);
	for (int n = 1; n < argc; n++) {
	    if ((n < (argc -1)) || (argv[n][0] == '-')) {
		fprintf(stderr, " %s", argv[n]);
	    }
	}
	fputs("\n\n", stderr);
	usage(1);
    }

    wm_delete_window = XInternAtom(XtDisplay(toplevel), "WM_DELETE_WINDOW",
				   False);
    XtAppAddActions(app_context, actions, XtNumber(actions));
    XtOverrideTranslations
	(toplevel, XtParseTranslationTable ("<Message>WM_PROTOCOLS: quit()"));

    i = 0;
    XtSetArg (arg[i], XtNiconPixmap,
	      XCreateBitmapFromData (XtDisplay(toplevel),
				     XtScreen(toplevel)->root,
				     (char *)eyes_bits, eyes_width, eyes_height));
    i++;
    XtSetArg (arg[i], XtNiconMask,
	      XCreateBitmapFromData (XtDisplay(toplevel),
				     XtScreen(toplevel)->root,
				     (char *)eyesmask_bits,
				     eyesmask_width, eyesmask_height));
    i++;
    XtSetValues (toplevel, arg, i);

    (void) XtCreateManagedWidget ("eyes", eyesWidgetClass, toplevel, NULL, 0);
    XtRealizeWidget (toplevel);
    (void) XSetWMProtocols (XtDisplay(toplevel), XtWindow(toplevel),
                            &wm_delete_window, 1);
    XtAppMainLoop(app_context);

    return 0;
}

# Repeat the process for any software package source code you wish to access or edit.


