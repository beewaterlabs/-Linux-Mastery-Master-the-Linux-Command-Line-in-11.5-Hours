# cron        A time-based job scheduler used for automating and scheduling repetitive tasks. â˜ž Named ater the Greek God of Time â˜ž Cronos

# Each user has a crontab file:
# Each crontab file consists of commands, one per line, that execute automatically at the time specified by the first five fields at the beginning of each command line.
# You can add as many tasks or jobs as you wish.

# The first time you launch the crontab, you will select your prefered editor. 
# To change this in the future, edit the ".selected_editor" hidden file in your ~/ (home) directory:
# Option 1:
nano .selected_editor

-------.selected_editor-------
# Generated by /usr/bin/select-editor
SELECTED_EDITOR="/bin/nano"

# Option 2:
select-editor

tron@ubuntu-dev:~$ select-editor

Select an editor.  To change later, run 'select-editor'.
  1. /bin/nano        <---- easiest
  2. /usr/bin/vim.basic
  3. /usr/bin/vim.tiny
  4. /bin/ed

Choose 1-4 [1]:

# To edit your crontab file:

crontab -e

# You will see data about crontab tasks/jobs:

# Edit this file to introduce tasks to be run by cron.
# 
# Each task to run has to be defined through a single line
# indicating with different fields when the task will be run
# and what command to run for the task
# 
# To define the time you can provide concrete values for
# minute (m), hour (h), day of month (dom), month (mon),
# and day of week (dow) or use '*' in these fields (for 'any').
# 
# Notice that tasks will be started based on the cron's system
# daemon's notion of time and timezones.
# 
# Output of the crontab jobs (including errors) is sent through
# email to the user the crontab file belongs to (unless redirected).
# 
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
# 

# The first 5 columns are for schedualing. The 6th column is reserved for entering the command or script to be run.
# You can have multiple spaces between the columns for easier readability.
# * = Any

# Column 1: m    | Minute [0-59]
# Column 2: h    | Hours [0-23], 11 = 11am, 13 = 1pm, 24 = midnight, -12 to translate to a 12 hour clock time.
# Column 3: dom  | Day of the month [1-31]
# Column 4: mon  | Month [1-12] or [JAN, FEB, etc]
# Column 5: dow  | Day of week [0-6] 0 = sunday, 6 = saturday or [MON, TUE, etc]

# This cron job runs the command echo "Hello World" and appends the output to ~/Desktop/hello.txt every minute of every hour of every day:

# m     h       dom     mon     dow     command

  *     *       *       *       *       echo "Hello World" >> ~/Desktop/hello.txt

# If I cat the "hello.txt" file, you will see how many minutes it took me to edit lines 42~48 after saving the crontab file:

tron@ubuntu-dev:~$ cat Desktop/hello.txt | wc -l
3

# Witout piping to the word count command:

tron@ubuntu-dev:~$ cat Desktop/hello.txt 
Hello World
Hello World
Hello World

# This cron job runs echo "Hello" and appends to ~/Desktop/hello-every-15-minutes.txt every 15 minutes (at minutes 0, 15, 30, and 45) of every hour, every day:

# m             h       dom     mon     dow     command

  0,15,30,45    *       *       *       *       echo "Hello" >> ~/Desktop/hello-every-15-minutes.txt

# You can shorten the command, */15 would be every 15 minutes:

# m             h       dom     mon     dow     command

  */15          *       *       *       *       echo "Hello" >> ~/Desktop/hello-every-15-minutes.txt

# To have the cron job run every 3 days:

# m             h       dom       mon     dow     command

  */15          *       */3       *       *       echo "Hello" >> ~/Desktop/hello-every-15-minutes.txt

# This cron job runs one minute before midnight (23:59) on Sundays during January and December only, appending the echo message to the "Jan-Dec-2359-checkin.txt" text file:

# m             h       dom       mon           dow       command

  59            23      *         JAN,DEC       SUN       echo "Jan-Dec-1-min-to-midnight-checkin" >> ~/Desktop/Jan-Dec-2359-checkin.txt

# Backup script for automation with crontab, using our ~/bin directory as it's path is added to the end of the ~/.bashrc bash shell configuration file: PATH="$PATH:$HOME/bin
# Why: By using ~/bin to save .sh scripts, you can drop the .sh from the end of the file and still run your script + you can run your script from anywhere in the filesystem.
# This backup script:
1. Creates a compressed tar archive (backup.tar.gz) of Documents, Downloads, Pictures, and Videos folders
2. Redirects errors to /dev/null
3. Logs the date to backup.log after completion 

tron@ubuntu-dev:~/bin$ cat backup 
#!/bin/bash

tar -cvzf ~/Desktop/backups/backup.tar.gz ~/{Documents,Downloads,Pictures,Videos} 2>/dev/null
date >> ~/Desktop/backups/backup.log

# Scheduling your "backup" script via crontab -e
# This cron job runs at 9:30 AM every Thursday, executing the backup script located at ~/bin/backup

# m        h       dom     mon     dow     command

  30       9       *       *       THU     bash ~/bin/backup

# Before cron job runs:

tron@ubuntu-dev:~/Desktop/backups$ ls
0 files

# After, we should have a tarball file made with gzip and a backup.log file that will record the date/timestamp of each backup:

tron@ubuntu-dev:~/Desktop/backups$ ls -lah
total 16K
drwxrwxr-x 2 tron tron 4.0K Feb 13 09:30 .
drwxr-xr-x 7 tron tron 4.0K Feb 13 09:24 ..
-rw-rw-r-- 1 tron tron   32 Feb 13 09:30 backup.log
-rw-rw-r-- 1 tron tron  179 Feb 13 09:30 backup.tar.gz

# Timestamp of the first backup ðŸ‘»!

tron@ubuntu-dev:~/Desktop/backups$ cat backup.log 
Thu Feb 13 09:30:01 AM UTC 2025
